<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<property name="LOGS_ABSOLUTE_PATH" value="C:/LogExample" />
	
	<!-- 
	* Appender 종류
	1. ConsoleAppender : 콘솔에 로그를 찍는 방법
	2. FileAppender : 파일에 로그를 찍는 방법
	3. RollingFileAppender : 여러개의 파일을 순회하면서 로그를 찍는 방법
	4. SMTPAppender : 로그를 메일에 찍어 보내는 방법 
	5. DBAppender : 데이터베이스에 로그를 찍는 방법
	6. 기타 SocketAppender, SSLSocketAppender등이 있다.
	 -->
	<!-- 
	* layout과 encoder의 차이점
	1. layout은 들어오는 이벤트를 String으로 변환하고 이벤트가 기록될 때 제어할 수 없으며 이벤트를 일괄 처리로 집계할 수 없다.
	2. encoder는 바이트를 소유하고 있는 appender가 관리하는 OutputStream에 쓸 시간과 내용을 완전히 제어할 수 있다.
	-->
	<!-- 
	* 패턴에 사용되는 요소
	1. %Logger{length} - Logger name을 축약할 수 있다. {length}는 최대 자리 수
	2. %thread - 현재 Thread 이름
	3. %-5level - 로그 레벨, -5는 출력의 고정폭 값
	4. %msg - 로그 메시지 (=%message)
	5. %n - new line
	6. ${PID:-} - 프로세스 아이디
	7. 기타
	 - %d : 로그 기록시간
	 - %p : 로깅 레벨
	 - %F : 로깅이 발생한 프로그램 파일명
	 - %M : 로깅일 발생한 메소드의 이름
	 - %l : 로깅이 발생한 호출지의 정보
	 - %L : 로깅이 발생한 호출지의 라인 수
	 - %t : 쓰레드 명
	 - %c : 로깅이 발생한 카테고리
	 - %C : 로깅이 발생한 클래스 명
	 - %m : 로그 메시지
	 - %r : 애플리케이션 시작 이후부터 로깅이 발생한 시점까지의 시간
	-->
	<!-- 예전로그 방식 -->
	<!--
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%d{HH:mm} %-5level %logger{5} - %msg%n</Pattern>
		</layout>
	</appender>
	-->
	
	<appender name="SAMPLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{5} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!--
	FileAppender와 하위 클래스는 encoder를 필요로 하고 더 이상 layout은 사용하지 않는다.
	-->
	<appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--
		* filter의 사용법
		1. LevelFilter : 로그 레벨에 따라서 로그를 기록한다.
		2. EvaluatorFilter : 표현식에 따라 해당하는 로그들만 기록한다.
		-->
		<!-- error인 경우만 로그로 쌓임 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- com.tistory.jeongpro 패키지로 시작하는 로그만 쌓임 -->
		<!--
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					if(logger.startsWith("com.tistory.jeongpro")){
						return true;
					}
					return false;
				</expression>
			</evaluator>
			<OnMismatch>DENY</OnMismatch>
			<OnMatch>ACCEPT</OnMatch>
		</filter>
		-->
		<file>${LOGS_ABSOLUTE_PATH}/logback.log</file>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{5} - %msg%n</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 압축확장자는 gz, zip 2가지 확장자를 지원 -->
			<fileNamePattern>${LOGS_ABSOLUTE_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 100MB -->
				<!-- KB, MB, GB -->
				<maxFileSize>5MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>30</maxHistory>
		</rollingPolicy>
	</appender>
	
	<!--
	* 로그레벨 : ERROR < WARN < INFO < DEBUG < TRACE 해당 레벨 이하의 것은 다 찍음
	 -->
	<logger name="com.reonsoft.spring" level="INFO" additivity="true">
		<appender-ref ref="ROLLING" />
	</logger>
	<root level="INFO">
		<appender-ref ref="SAMPLE" />
	</root>
</configuration>